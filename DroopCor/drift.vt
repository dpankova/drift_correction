`timescale 1 ns/ 1 ps
`define ONE

module drift_vlg_tst();

   reg [13:0] adc;
   wire [3:0] fsm_out;
   reg rst_n; 
   reg pause;
   reg rescale;
   reg read_fin;
   reg rem6;
   reg [4:0] remaddr6;
   reg [13:0] center_val;
   reg [4:0] rdaddr;
   reg [17:0] rdaddr1;
   reg clk;
   reg [1:0] switch;
   wire [19:0] count_in_out;
   wire [4:0]  addr_count_in;
   wire      filled;
   wire [19:0] out_ram;
   wire [13:0] adc_val;
   wire [4:0]  addr_out;
   
   
`ifdef ONE  
 
  
  drift i1 (
       // port map - connection between master ports and signals/registers   
	    .adc(adc),
	    .center_val(center_val),
	    .rst_n(rst_n),
	    .pause(pause),
	    .rescale(rescale),
	    .read_fin(read_fin),
	    .q_a(out_ram),
	    .rdaddr(rdaddr),
	    .clk(clk),
	    .filled(filled),
	    .fsm_out(fsm_out),
	    .addr_out(addr_out),
	    .count_in_out(count_in_out),
	    .rem6(rem6),
	    .remaddr6(remaddr6),
	    .addr_count_in(addr_count_in)
	    );
   
   test_rom_example i2 (
			.rdaddr(rdaddr1),
			.adc_val(adc_val)
			);
  
    // Clock generator
   localparam PERIOD = 50.0;
   always #(PERIOD/2) clk = ~ clk;
 
   always @(posedge clk)
     begin
	if (rdaddr1 == 18'd6778)
	  begin
	     adc<=adc_val;
	     rdaddr1 <= 18'b0;
	  end
	else
	  begin
	     rdaddr1 <= rdaddr1 +1'b1;
           /* if (rdaddr1 == 9'd1)
	       begin
	     	  adc <= 14'd4775;
	       end
	     else if (rdaddr1 == 9'd2)
		begin
	     	   adc <= 14'd4777;
		end
	     else if (rdaddr1 == 9'd3)
		begin
	     	  adc <= 14'd4775;
		end
	     else if (rdaddr1 == 9'd4)
	       begin
	     	  adc <= 14'd4775;
	       end
	     else if (rdaddr1 == 9'd5)
	       begin
	     	  adc <= 14'd4778;
	       end
	     else if (rdaddr1 == 9'd6)
	       begin
	     	  adc <= 14'd4776;
	       end*/
	    // adc <= 14'd4775;
	     
	     adc <= adc_val;
        /*     else if (switch == 2'b01)
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b10;		  
	       end
	     else if (switch == 2'b10)
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b11;
	       end
	     else if (switch == 2'b11)
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b00;
	       end
	     else 
	       begin
		  adc <= 14'd4777;
		  switch <= 2'b01;
	       end*/
	   
	     
	 end
     end // always @ (posedge clk)


   
   initial                                                
     begin      

	center_val = 14'd8188;  
        rdaddr = 5'd16;
	rdaddr1 = 18'd0;
	clk = 1'b0;
	pause = 1'b0;
	rescale = 1'b0;
	rst_n = 1'b0;
	rem6 = 1'b1;
	remaddr6 = 13;
	#(5*PERIOD) rst_n = 1'b1;
	
	#(32*PERIOD)  rdaddr1 = 18'b0; 
	#(6779*PERIOD)  pause = 1'b1;
	read_fin = 1'b0; 
		
  #(5*PERIOD) rdaddr1 <= 18'b0; 
	assign rdaddr = rdaddr1[4:0];
//515	
//	#(1*PERIOD) rdaddr = 9'b100000000;
     end             
   
`endif  
                                       
endmodule



